@page "/tools/password-generator"
@using V.NET.Client.Shared.Models.Tools
@inject IJSRuntime JSRuntime
@inherits ToolPageBase

<h3>Password Generator</h3>

<div class="form-group">
    <label for="length">Password Length</label>
    <input @bind="passwordLength" type="number" class="form-control" min="4" max="64" id="length" />
</div>

<div class="btn-group btn-group-toggle d-flex justify-content-center">
    <button class="btn flex-fill @GetButtonClass(includeUppercase)" @onclick="() => includeUppercase = !includeUppercase"
            style="border-radius: 0;" aria-pressed="@includeUppercase">
        <span class="oi oi-text" title="Uppercase"></span>
        <span class="d-none d-md-inline"> Uppercase</span>
    </button>
    <button class="btn flex-fill @GetButtonClass(includeNumbers)" @onclick="() => includeNumbers = !includeNumbers"
            style="border-radius: 0;" aria-pressed="@includeNumbers">
        <span class="oi oi-list-rich" title="Numbers"></span>
        <span class="d-none d-md-inline"> Numbers</span>
    </button>
    <button class="btn flex-fill @GetButtonClass(includeSymbols)" @onclick="() => includeSymbols = !includeSymbols"
            style="border-radius: 0;" aria-pressed="@includeSymbols">
        <span class="oi oi-star" title="Symbols"></span>
        <span class="d-none d-md-inline"> Symbols</span>
    </button>
</div>

<div class="progress-container text-center mt-4">
    <h5>Move your cursor around or tap the screen to gather randomness</h5>
    <div class="progress mt-2" style="height: 25px;">
        <div class="progress-bar progress-bar-striped progress-bar-animated" 
             role="progressbar" 
             style="width: @progressPercentage%;" 
             aria-valuenow="@progressPercentage" 
             aria-valuemin="0" 
             aria-valuemax="100">
            @progressPercentage%
        </div>
    </div>
</div>

<button class="btn btn-primary mt-2" @onclick="GeneratePassword" disabled="@(!isSeedGenerated)">Generate Password</button>

<div class="mt-3">
    <h4>Generated Password:</h4>
    <div id="passwordBox" class="alert alert-success copy-password" @onclick="CopyToClipboard">
        @generatedPassword
    </div>
</div>

@code {
    private int passwordLength = 12;
    private bool includeUppercase = true;
    private bool includeNumbers = true;
    private bool includeSymbols = true;
    private string generatedPassword = string.Empty;
    private List<(int, int)> uniquePositions = new(); // List to store unique positions
    private int progressPercentage = 0;
    private const int maxProgress = 100;
    private bool isSeedGenerated = false;
    private (int x, int y)? lastPosition = null; // Store the last position to prevent rapid progress
    private string copyAnimationClass = string.Empty;

    private async Task CopyToClipboard()
    {
        if (!string.IsNullOrEmpty(generatedPassword))
        {
            // Copy the password to the clipboard
            await JSRuntime.InvokeVoidAsync("copyTextAndShake", generatedPassword, "passwordBox");
        }
    }

    public override ToolModel Tool => new ToolModel
    {
        Name = "Password Generator",
        Description = "Generate strong, random passwords with customizable options.",
        Link = "/tools/password-generator"
    };

    protected override void OnInitialized()
    {
        ResetProgress();
    }

    private bool isProgressComplete => progressPercentage >= maxProgress;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CaptureUserInput();
        }
    }

    private async Task CaptureUserInput()
    {
        await JSRuntime.InvokeVoidAsync("captureMouseInput", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public void OnMouseMove(int x, int y)
    {
        if (!isProgressComplete)
        {
            // Ensure the new position is unique and not too close to the previous one
            if (lastPosition == null || (Math.Abs(lastPosition.Value.x - x) > 10 || Math.Abs(lastPosition.Value.y - y) > 10))
            {
                uniquePositions.Add((x, y));
                lastPosition = (x, y);
                progressPercentage = Math.Min(maxProgress, uniquePositions.Count); // Increment progress

                if (isProgressComplete)
                {
                    isSeedGenerated = true;
                }

                InvokeAsync(StateHasChanged); // Update the UI
            }
        }
    }

    private void GeneratePassword()
    {
        if (!isSeedGenerated) return; // Ensure seed is generated before generating a password

        // Seed the random generator with user input data
        int seed = uniquePositions.Sum(pos => pos.Item1 + pos.Item2);
        var random = new Random(seed);

        const string lowercase = "abcdefghijklmnopqrstuvwxyz";
        const string uppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        const string numbers = "0123456789";
        const string symbols = "!@#$%^&*()_+[]{}|;:,.<>?";

        string allChars = lowercase;
        if (includeUppercase) allChars += uppercase;
        if (includeNumbers) allChars += numbers;
        if (includeSymbols) allChars += symbols;

        generatedPassword = new string(Enumerable.Repeat(allChars, passwordLength)
            .Select(s => s[random.Next(s.Length)]).ToArray());

        // Reset progress so user can generate another password
        ResetProgress();
    }

    private void ResetProgress()
    {
        uniquePositions.Clear(); // Reset unique positions
        lastPosition = null; // Reset last position
        progressPercentage = 0; // Reset progress bar
        isSeedGenerated = false; // Reset seed status
    }

    private string GetButtonClass(bool isActive)
    {
        return isActive ? "btn-primary" : "btn-outline-primary";
    }
}
