@page "/tools/color-palette-generator"
@using V.NET.Client.Shared.Models.Tools
@inherits ToolPageBase
@inject IJSRuntime JSRuntime

<PageTitle>Color Palette Generator</PageTitle>

<h3 class="text-center mb-4">Color Palette Generator</h3>

<div class="container d-flex flex-column align-items-center">
    <div class="row justify-content-center w-100">
        <div class="col-12 text-center">
            <h5>Press "Space" to generate a new color palette. Click on a color to copy the HEX code.</h5>
        </div>
    </div>

    <div class="row justify-content-center w-100 mt-4">
        <div class="col-12 d-flex flex-wrap justify-content-center">
            @foreach (var color in colors)
            {
                var id = "color - " + @color.GetHashCode();
                <div id="@id" class="color-box m-2"
                     style="background-color: @color;"
                     @onmouseover="() => hoveredColor = color"
                     @onmouseout="() => hoveredColor = null"
                     @onclick="() => CopyToClipboard(color, id)">
                    <span class="color-text" style="visibility: @(hoveredColor == color ? "visible" : "hidden")">@color</span>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<string> colors = new();
    private string hoveredColor = null;

    public override ToolModel Tool => new ToolModel
        {
            Name = "Color Palette Generator",
            Description = "Generate relevant color palettes and copy the HEX code of any color.",
            Link = "/tools/color-palette-generator"
        };

    protected override void OnInitialized()
    {
        GeneratePalette();
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializePaletteGenerator", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public void GeneratePalette()
    {
        colors = GenerateRandomPalette();
        InvokeAsync(StateHasChanged);
    }

    private List<string> GenerateRandomPalette()
    {
        var random = new Random();
        var paletteType = random.Next(3); // 0 for Monochromatic, 1 for Complementary, 2 for Analogous

        switch (paletteType)
        {
            case 0:
                return GenerateMonochromaticPalette();
            case 1:
                return GenerateComplementaryPalette();
            case 2:
                return GenerateAnalogousPalette();
            default:
                return GenerateMonochromaticPalette(); // Fallback to monochromatic
        }
    }

    private List<string> GenerateMonochromaticPalette()
    {
        var random = new Random();
        var baseColor = random.Next(0x1000000); // Generate a base color
        var baseHex = $"#{baseColor:X6}";

        return new List<string>
        {
            AdjustColor(baseHex, 0.1),
            AdjustColor(baseHex, 0.3),
            AdjustColor(baseHex, 0.5),
            AdjustColor(baseHex, 0.7),
            AdjustColor(baseHex, 0.9)
        };
    }

    private List<string> GenerateComplementaryPalette()
    {
        var random = new Random();
        var baseColor = random.Next(0x1000000);
        var baseHex = $"#{baseColor:X6}";
        var complementaryColor = $"#{((baseColor ^ 0xFFFFFF) & 0xFFFFFF):X6}"; // Complementary color

        return new List<string>
        {
            baseHex,
            AdjustColor(complementaryColor, 0.1),
            AdjustColor(complementaryColor, 0.3),
            AdjustColor(complementaryColor, 0.5),
            AdjustColor(complementaryColor, 0.7)
        };
    }

    private List<string> GenerateAnalogousPalette()
    {
        var random = new Random();
        var baseColor = random.Next(0x1000000);
        var baseHex = $"#{baseColor:X6}";

        return new List<string>
        {
            AdjustHue(baseHex, -30),
            baseHex,
            AdjustHue(baseHex, 30),
            AdjustHue(baseHex, 60),
            AdjustHue(baseHex, 90)
        };
    }

    private string AdjustColor(string hexColor, double factor)
    {
        var color = int.Parse(hexColor.Substring(1), System.Globalization.NumberStyles.HexNumber);

        var r = (int)(((color >> 16) & 0xFF) * factor);
        var g = (int)(((color >> 8) & 0xFF) * factor);
        var b = (int)((color & 0xFF) * factor);

        return $"#{(r << 16) + (g << 8) + b:X6}";
    }

    private string AdjustHue(string hexColor, int degree)
    {
        var color = System.Drawing.ColorTranslator.FromHtml(hexColor);
        var hue = (color.GetHue() + degree) % 360;
        var saturation = color.GetSaturation();
        var brightness = color.GetBrightness();

        var newColor = FromHsb(hue, saturation, brightness);
        return $"#{newColor.R:X2}{newColor.G:X2}{newColor.B:X2}";
    }

    private System.Drawing.Color FromHsb(float hue, float saturation, float brightness)
    {
        if (saturation == 0)
        {
            return System.Drawing.Color.FromArgb(
                (int)(brightness * 255),
                (int)(brightness * 255),
                (int)(brightness * 255));
        }

        var sectorPos = hue / 60.0f;
        var sectorNumber = (int)Math.Floor(sectorPos);
        var fractionalSector = sectorPos - sectorNumber;

        var p = brightness * (1.0f - saturation);
        var q = brightness * (1.0f - (saturation * fractionalSector));
        var t = brightness * (1.0f - (saturation * (1 - fractionalSector)));

        switch (sectorNumber)
        {
            case 0:
                return System.Drawing.Color.FromArgb(
                    (int)(brightness * 255),
                    (int)(t * 255),
                    (int)(p * 255));
            case 1:
                return System.Drawing.Color.FromArgb(
                    (int)(q * 255),
                    (int)(brightness * 255),
                    (int)(p * 255));
            case 2:
                return System.Drawing.Color.FromArgb(
                    (int)(p * 255),
                    (int)(brightness * 255),
                    (int)(t * 255));
            case 3:
                return System.Drawing.Color.FromArgb(
                    (int)(p * 255),
                    (int)(q * 255),
                    (int)(brightness * 255));
            case 4:
                return System.Drawing.Color.FromArgb(
                    (int)(t * 255),
                    (int)(p * 255),
                    (int)(brightness * 255));
            default:
                return System.Drawing.Color.FromArgb(
                    (int)(brightness * 255),
                    (int)(p * 255),
                    (int)(q * 255));
        }
    }

    private async Task CopyToClipboard(string color, string elementId)
    {
        await JSRuntime.InvokeVoidAsync("copyTextAndShake", color, elementId);
    }
}