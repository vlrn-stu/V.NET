@page "/tools/hmac-key-generator"
@using System.Security.Cryptography
@using V.NET.Client.Shared.Models.Tools
@inject IJSRuntime JSRuntime
@inherits ToolPageBase

<h3>HMAC Key Generator</h3>

<div class="form-group">
    <label for="length">Key Length (in characters)</label>
    <input @bind="keyLength" type="number" class="form-control" min="16" max="128" id="length" />
</div>

<div class="form-group">
    <label for="encoding">Select Encoding</label>
    <select class="form-control" @bind="selectedEncoding">
        <option value="base64">Base64</option>
        <option value="hex">Hex</option>
    </select>
</div>

<button class="btn btn-primary mt-3 w-100" @onclick="GenerateHmacKey">Generate HMAC Key</button>

@if (!string.IsNullOrEmpty(generatedKey))
{
    <div class="mt-3">
        <h4>Generated HMAC Key:</h4>
        <div id="hmacKeyBox" class="alert alert-success copy-key" @onclick="CopyToClipboard">
            @generatedKey
        </div>
    </div>
}

@code {
    private int keyLength = 32; // Default key length in characters
    private string selectedEncoding = "base64"; // Default encoding
    private string generatedKey = string.Empty;

    public override ToolModel Tool => new ToolModel
        {
            Name = "HMAC Key Generator",
            Description = "Generate secure HMAC keys with customizable length and encoding.",
            Link = "/tools/hmac-key-generator"
        };

    private void GenerateHmacKey()
    {
        int byteLength = selectedEncoding == "base64" ? (int)(keyLength * 3 / 4.0) : keyLength / 2;
        byte[] key = new byte[byteLength];
        RandomNumberGenerator.Fill(key);

        if (selectedEncoding == "base64")
        {
            generatedKey = Convert.ToBase64String(key).Substring(0, keyLength);
        }
        else if (selectedEncoding == "hex")
        {
            generatedKey = BitConverter.ToString(key).Replace("-", "").ToLower().Substring(0, keyLength);
        }
    }

    private async Task CopyToClipboard()
    {
        if (!string.IsNullOrEmpty(generatedKey))
        {
            await JSRuntime.InvokeVoidAsync("copyTextAndShake", generatedKey, "hmacKeyBox");
        }
    }
}
